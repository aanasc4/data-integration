"""
Utilit√°rios para Qualidade de Dados
Projeto ITBI Recife 2023-2025
"""

import pandas as pd
import json
import os
from datetime import datetime
from typing import Dict, List, Tuple

# Log global de opera√ß√µes
operation_log = []

def log_operation(operation: str, dataset: str, records: int, status: str):
    """
    Registra opera√ß√£o no log.
    
    Args:
        operation (str): Tipo de opera√ß√£o (extract, transform, load)
        dataset (str): Nome do dataset
        records (int): N√∫mero de registros processados
        status (str): Status da opera√ß√£o
    """
    
    log_entry = {
        'timestamp': datetime.now().isoformat(),
        'operation': operation,
        'dataset': dataset,
        'records': records,
        'status': status
    }
    
    operation_log.append(log_entry)

def validate_itbi_structure(df: pd.DataFrame) -> Dict[str, bool]:
    """
    Valida se o DataFrame tem estrutura t√≠pica de dados ITBI.
    
    Args:
        df (pd.DataFrame): DataFrame a ser validado
        
    Returns:
        Dict[str, bool]: Resultados da valida√ß√£o
    """
    
    required_columns = [
        'valor_avaliacao', 'bairro', 'tipo_imovel', 'data_transacao',
        'area_construida', 'logradouro'
    ]
    
    validation_results = {}
    
    # Verificar colunas obrigat√≥rias
    for col in required_columns:
        validation_results[f'has_{col}'] = col in df.columns
    
    # Verificar tipos de dados
    if 'valor_avaliacao' in df.columns:
        validation_results['valor_is_numeric'] = pd.api.types.is_numeric_dtype(df['valor_avaliacao'])
    
    if 'data_transacao' in df.columns:
        validation_results['data_is_datetime'] = pd.api.types.is_datetime64_any_dtype(df['data_transacao'])
    
    # Verificar se n√£o est√° vazio
    validation_results['not_empty'] = not df.empty
    
    # Verificar duplicatas
    validation_results['no_full_duplicates'] = not df.duplicated().any()
    
    return validation_results

def check_data_quality(df: pd.DataFrame) -> Dict:
    """
    An√°lise completa de qualidade dos dados.
    
    Args:
        df (pd.DataFrame): DataFrame a ser analisado
        
    Returns:
        Dict: Relat√≥rio de qualidade
    """
    
    quality_report = {
        'timestamp': datetime.now().isoformat(),
        'total_records': len(df),
        'total_columns': len(df.columns),
        'memory_usage_mb': df.memory_usage(deep=True).sum() / 1024**2
    }
    
    # An√°lise de valores nulos
    null_analysis = {}
    for col in df.columns:
        null_count = df[col].isnull().sum()
        null_percentage = (null_count / len(df)) * 100
        null_analysis[col] = {
            'null_count': int(null_count),
            'null_percentage': round(null_percentage, 2)
        }
    
    quality_report['null_analysis'] = null_analysis
    
    # An√°lise de tipos de dados
    dtype_analysis = {}
    for col in df.columns:
        dtype_analysis[col] = str(df[col].dtype)
    
    quality_report['data_types'] = dtype_analysis
    
    # An√°lise de duplicatas
    quality_report['duplicates'] = {
        'total_duplicates': int(df.duplicated().sum()),
        'duplicate_percentage': round((df.duplicated().sum() / len(df)) * 100, 2)
    }
    
    # An√°lise de completude
    total_cells = len(df) * len(df.columns)
    null_cells = df.isnull().sum().sum()
    completeness = ((total_cells - null_cells) / total_cells) * 100
    
    quality_report['completeness'] = {
        'total_cells': int(total_cells),
        'null_cells': int(null_cells),
        'completeness_percentage': round(completeness, 2)
    }
    
    # Valida√ß√£o espec√≠fica ITBI
    itbi_validation = validate_itbi_structure(df)
    quality_report['itbi_validation'] = itbi_validation
    
    return quality_report

def generate_quality_report(df: pd.DataFrame, output_dir: str = "results/quality") -> str:
    """
    Gera relat√≥rio completo de qualidade e salva em arquivo.
    
    Args:
        df (pd.DataFrame): DataFrame a ser analisado
        output_dir (str): Diret√≥rio para salvar o relat√≥rio
        
    Returns:
        str: Caminho do arquivo do relat√≥rio
    """
    
    print("\nüìä GERANDO RELAT√ìRIO DE QUALIDADE")
    print("-" * 35)
    
    # Criar diret√≥rio se necess√°rio
    os.makedirs(output_dir, exist_ok=True)
    
    # Gerar an√°lise de qualidade
    quality_report = check_data_quality(df)
    
    # Adicionar log de opera√ß√µes
    quality_report['operation_log'] = operation_log
    
    # Salvar como JSON
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    json_path = os.path.join(output_dir, f'quality_report_{timestamp}.json')
    
    with open(json_path, 'w', encoding='utf-8') as f:
        json.dump(quality_report, f, indent=2, ensure_ascii=False)
    
    # Gerar relat√≥rio em texto leg√≠vel
    txt_path = os.path.join(output_dir, f'quality_report_{timestamp}.txt')
    
    with open(txt_path, 'w', encoding='utf-8') as f:
        f.write("RELAT√ìRIO DE QUALIDADE DE DADOS - ITBI RECIFE\n")
        f.write("=" * 50 + "\n\n")
        
        f.write(f"Data/Hora: {quality_report['timestamp']}\n")
        f.write(f"Total de Registros: {quality_report['total_records']:,}\n")
        f.write(f"Total de Colunas: {quality_report['total_columns']}\n")
        f.write(f"Uso de Mem√≥ria: {quality_report['memory_usage_mb']:.2f} MB\n\n")
        
        # Completude geral
        completeness = quality_report['completeness']
        f.write("COMPLETUDE DOS DADOS:\n")
        f.write("-" * 20 + "\n")
        f.write(f"Completude Geral: {completeness['completeness_percentage']:.1f}%\n")
        f.write(f"C√©lulas Nulas: {completeness['null_cells']:,}\n")
        f.write(f"Total de C√©lulas: {completeness['total_cells']:,}\n\n")
        
        # Duplicatas
        duplicates = quality_report['duplicates']
        f.write("AN√ÅLISE DE DUPLICATAS:\n")
        f.write("-" * 22 + "\n")
        f.write(f"Registros Duplicados: {duplicates['total_duplicates']:,}\n")
        f.write(f"Percentual: {duplicates['duplicate_percentage']:.2f}%\n\n")
        
        # Valida√ß√£o ITBI
        f.write("VALIDA√á√ÉO ESTRUTURA ITBI:\n")
        f.write("-" * 25 + "\n")
        itbi_val = quality_report['itbi_validation']
        for check, result in itbi_val.items():
            status = "‚úÖ" if result else "‚ùå"
            f.write(f"{status} {check}: {result}\n")
        f.write("\n")
        
        # Top 10 colunas com mais nulos
        f.write("TOP 10 COLUNAS COM MAIS NULOS:\n")
        f.write("-" * 30 + "\n")
        null_analysis = quality_report['null_analysis']
        sorted_nulls = sorted(null_analysis.items(), 
                            key=lambda x: x[1]['null_count'], 
                            reverse=True)[:10]
        
        for col, null_info in sorted_nulls:
            if null_info['null_count'] > 0:
                f.write(f"{col}: {null_info['null_count']:,} ({null_info['null_percentage']:.1f}%)\n")
    
    print(f"   üìÑ Relat√≥rio JSON: {json_path}")
    print(f"   üìÑ Relat√≥rio TXT: {txt_path}")
    
    # Imprimir resumo na tela
    print(f"\nüìã RESUMO DE QUALIDADE:")
    print(f"   ‚Ä¢ Completude: {quality_report['completeness']['completeness_percentage']:.1f}%")
    print(f"   ‚Ä¢ Duplicatas: {quality_report['duplicates']['total_duplicates']:,}")
    print(f"   ‚Ä¢ Valida√ß√£o ITBI: {sum(quality_report['itbi_validation'].values())}/{len(quality_report['itbi_validation'])} checks")
    
    return json_path

def validate_bairros_recife(df: pd.DataFrame) -> Dict:
    """
    Valida se os bairros s√£o realmente do Recife.
    
    Args:
        df (pd.DataFrame): DataFrame com coluna 'bairro'
        
    Returns:
        Dict: Resultado da valida√ß√£o
    """
    
    # Lista de bairros conhecidos do Recife
    bairros_recife = [
        'Boa Viagem', 'V√°rzea', 'Imbiribeira', 'Pina', 'Casa Amarela',
        'Madalena', 'Gra√ßas', 'Boa Vista', 'Encruzilhada', 'Torre',
        'Recife', 'Espinheiro', 'Aflitos', 'Derby', 'Rosarinho',
        'Santana', 'S√£o Jos√©', 'Apipucos', 'Casa Forte', 'Parnamirim',
        'Hip√≥dromo', 'Tamarineira', 'Jaqueira', 'Monteiro', 'Cordeiro',
        'Ilha do Leite', 'Paissandu', 'Santo Ant√¥nio', 'S√£o Geraldo',
        'Bongi', 'Mustardinha', 'Tejipi√≥', 'Tot√≥', 'Curado', 'Barro',
        'Jardim S√£o Paulo', 'Sancho', 'Caxang√°', 'Cidade Universit√°ria',
        'Iputinga', 'Torr√µes', 'Pra√ßa da Bandeira', 'Campina do Barreto',
        'Porto da Madeira', 'Cabanga', 'Coelhos', 'Ilha Joana Bezerra',
        'Bras√≠lia Teimosa', 'Coque', 'Ilha do Retiro', 'Est√¢ncia',
        'Afogados', 'Bonan√ßa', 'Mangueira', 'Macaxeira', 'Nova Descoberta',
        'Brejo da Guabiraba', 'C√≥rrego do Jenipapo', 'Guabiraba',
        'Passarinho', 'Dois Unidos', 'Alto do Mandu', 'Beberibe',
        'Linha do Tiro', 'Fund√£o', '√Ågua Fria', 'Alto Santa Terezinha',
        'Bomba do Hemet√©rio', 'Cajueiro', 'Carepa', 'Cosme e Dami√£o',
        'Delta', 'Encantado', 'Peixinhos', 'Roda de Fogo', 'Torre√£o',
        'Arruda', 'Campina do Barreto', 'Campo Grande', 'Engenho do Meio',
        'Fairyland', 'Hunting', 'Ipsep', 'Jardim Atl√¢ntico', 'Jord√£o',
        'Presidente Kennedy', 'Set√∫bal', 'Cohab', 'Ibura', 'Jord√£o Baixo',
        'Barra de Jangada', 'Candeias', 'Piedade', 'Pocinho', 'Vila Rica',
        'Curado', 'Jardim Uch√¥a', 'Restinga', 'Rio Doce', 'San Martin',
        'Vasco da Gama', 'Jardim Monte Verde', 'Ca√ßote', 'Moreno'
    ]
    
    if 'bairro' not in df.columns:
        return {'error': 'Coluna bairro n√£o encontrada'}
    
    bairros_encontrados = df['bairro'].value_counts()
    
    # Verificar quantos bairros s√£o reconhecidos
    bairros_validos = 0
    bairros_suspeitos = []
    
    for bairro in bairros_encontrados.index:
        if bairro in bairros_recife:
            bairros_validos += 1
        else:
            bairros_suspeitos.append(bairro)
    
    total_bairros = len(bairros_encontrados)
    percentual_validos = (bairros_validos / total_bairros) * 100
    
    return {
        'total_bairros': total_bairros,
        'bairros_validos': bairros_validos,
        'bairros_suspeitos': bairros_suspeitos[:10],  # Top 10 suspeitos
        'percentual_validos': round(percentual_validos, 1),
        'validacao_ok': percentual_validos >= 80  # 80% de bairros v√°lidos
    }

if __name__ == "__main__":
    # Teste dos utilit√°rios
    print("üß™ Testando utilit√°rios de qualidade...")
    
    # Criar dados de teste
    test_data = pd.DataFrame({
        'valor_avaliacao': [100000.0, 200000.0, None],
        'bairro': ['Boa Viagem', 'V√°rzea', 'Pina'],
        'tipo_imovel': ['Apartamento', 'Casa', 'Apartamento'],
        'data_transacao': pd.to_datetime(['2023-01-01', '2023-02-01', '2023-03-01']),
        'area_construida': [50.5, 75.0, 60.0],
        'logradouro': ['Rua A', 'Rua B', 'Rua C']
    })
    
    # Testar valida√ß√£o
    validation = validate_itbi_structure(test_data)
    print(f"Valida√ß√£o ITBI: {validation}")
    
    # Testar valida√ß√£o de bairros
    bairros_validation = validate_bairros_recife(test_data)
    print(f"Valida√ß√£o bairros: {bairros_validation}")
    
    print("‚úÖ Testes conclu√≠dos!")